<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="java" deleted="false" description="Interface for a presenter to edit" enabled="true" name="editpresenterif">public interface ${cls}EditPresenter {&#13;
&#13;
	public void startPresenting();&#13;
&#13;
	public ${cls}EditView getView();&#13;
&#13;
	public ${cls} get${cls}();&#13;
	&#13;
	public void set${cls}(${cls} new${cls});&#13;
&#13;
}&#13;
</template><template autoinsert="false" context="java" deleted="false" description="Implementation for a presenter to edit" enabled="true" name="editpresenterimpl">public class ${cls}EditPresenterImpl implements ${cls}EditPresenter, ${cls}EditView.Observer {&#13;
&#13;
	private static final long serialVersionUID = 1L;&#13;
&#13;
	private Map&lt;String, Object&gt; context;&#13;
	private ${cls}EditView view;&#13;
	private ${cls} my${cls} = new ${cls}();&#13;
	&#13;
	public ${cls}EditPresenterImpl(Map&lt;String, Object&gt; context, ${cls}EditView view) {&#13;
		super();&#13;
		this.context = context;&#13;
		this.view = view;&#13;
	}&#13;
&#13;
	@Override&#13;
	public ${cls} get${cls}() {&#13;
		return my${cls};&#13;
	}&#13;
&#13;
	@Override&#13;
	public void set${cls}(${cls} new${cls}) {&#13;
		this.my${cls} = new${cls};&#13;
	}&#13;
&#13;
	@Override&#13;
	public ${cls}EditView getView() {&#13;
		return view;&#13;
	}&#13;
&#13;
	@Override&#13;
	public void startPresenting() {&#13;
		view.setObserver(this);&#13;
		view.initializeUi();&#13;
		// TODO: set choices, load from backend if nec., do other init stuff, etc.&#13;
        loadFromModel();&#13;
	}&#13;
&#13;
	protected void loadFromModel() {&#13;
		// TODO: load into view from ${cls} using field2view&#13;
	}&#13;
&#13;
	protected void saveToModel() {&#13;
		// TODO: save to ${cls} from view using view2field&#13;
	}&#13;
&#13;
	@Override&#13;
	public void onSave() {&#13;
		if (!view.checkAllFieldsValid()) {&#13;
			return;&#13;
		}&#13;
		saveToModel();&#13;
		// TODO: save 2 backend, do more navigation, etc.&#13;
	}&#13;
&#13;
	@Override&#13;
	public void onCancel() {&#13;
		// TODO: do more navigation, etc.&#13;
	}&#13;
&#13;
}&#13;
</template><template autoinsert="false" context="java" deleted="false" description="Interface for a view to edit" enabled="true" name="editviewif">public interface ${cls}EditView {&#13;
&#13;
	// TODO: add fields with viewfieldif / viewselfieldif&#13;
&#13;
	public boolean checkAllFieldsValid();&#13;
&#13;
	public void showErrorMessage(String message);&#13;
&#13;
	public void setObserver(${cls}EditView.Observer observer);&#13;
	&#13;
	public static interface Observer {&#13;
&#13;
		public void onCancel();&#13;
		&#13;
		public void onSave();&#13;
	&#13;
	}&#13;
&#13;
}</template><template autoinsert="false" context="java" deleted="false" description="Set view contents from a bean field (4 use in loadFromModel)" enabled="true" name="field2view">view.set${fld}(get${cls}().get${fld}());</template><template autoinsert="false" context="java" deleted="false" description="Set a bean field from view contents (4 use in saveToModel)" enabled="true" name="view2field">get${cls}().set${fld}(view.get${fld}());</template><template autoinsert="false" context="java" deleted="false" description="Interface for a field with free choices in a view" enabled="true" name="viewfieldif">public ${type} get${fld}();&#13;
public void set${fld}(${type} new${fld});</template><template autoinsert="false" context="java" deleted="false" description="Interface for a field with given choices in a view" enabled="true" name="viewselfieldif">public ${type} get${fld}();&#13;
public void set${fld}(${type} new${fld});&#13;
public void setChoicesFor${fld}(java.util.List&lt;${type}&gt; choicesFor${fld});</template></templates>